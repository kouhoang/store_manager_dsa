- Lưu file code có gắn git lên github
- B1: Tạo tk github
- B2: Truy cập avatar bấm my repo...
- B3: Tạo repo... trên github và copy đường mã https
- B4: Tải code lên github theo câu lệnh:
git remote add <Tên tự đăt> <mã https>
- Remote là để phân biệt với Local.
 + Local là file lưu trên máy
 + Remote là lưu online
- Kiểm tra các repo đã tạo:
git remote
- Nếu có sẽ trả kết quả là tên repo
git remote -v
- Tương tự nhưng có nhiều thông tin hơn
git remote remove <Tên repo>
- Xóa repo có tên tương ứng
- Kiểm tra lại bằng "git remove" và chắc chắn đã xóa

* Thêm code lên github
- Trước tiên, khi mới tạo repo, ta là người duy nhất có thể
- up file lên nên phải thông báo cho github biết, ta là người up file
git config --global credential.username <Username - VD: KDMinh>
- Bây giờ sử dụng lệnh push để đẩy repo lên github
git push <Tên repo> <Nhánh của commit>
 + Tên repo cho biết remote repo trên github mà mình muốn add.
 + Khi đẩy lên, ta không chỉ đẩy repo mà còn đẩy cả nhánh (hay toàn bộ lịch sử
 + code trên nhánh đó). Tên nhánh, vd: master hoặc main
- Mỗi khi commit, nhánh hiện tại được mở rộng (đã commit)
- nhưng remote repo vẫn nằm ở commit trước đó. Vì vậy, nhận xét: cần update lại
- Sử dụng lệnh push, vd:
git push origin2 main2-branch

* Một số cách xử lý lỗi khi push
1. Sai đường link https, sử dụng lệnh:
git remote -v
- Nếu sai thực hiện lệnh:
 git remove <Tên repo>
+ để gỡ và tạo lại bằng:
 git add <tên repo mới> <đường dẫn https>
2. Quên hoặc chạy sai lệnh config. Thực hiện lại lệnh.

* Feature of github
- Cho phép các chỉnh sửa ở mỗi commit trên github,
- Bấm vào biểu tượng quay lui (lịch sử) để xem sự thay đổi trong các đoạn code
 + văn bản hay số lượng file.

* (Feature 1) Sync changes from computer to github:
- Sau khi push lên github, quay lại và sử dụng lệnh:
git log --all --graph
 + Ta sẽ thấy ở nhánh hiện tại có thêm 1 tên khác, vd:
 HEAD -> master, origin/master
 hay
 HEAD -> <tên nhánh>, <tên remote repo>/<tên nhánh>
- Khi thực hiện commit, như ở trên, nhánh local được update trong khi trên
 + github chưa update nên có sự khác nhau, thực hiện lệnh push như ở trên.
- Nếu bản cập nhật ở local và remote là như nhau, lệnh:
git push <tên repo> <nhánh>
 + sẽ trả kết quả: "Everything up-to-date"

* (Feature 2) Nói thêm về push
- Có thể thực hiện lệnh:
 git push <tên repo> <nhánh> --set-upstream
 + Khi đó:
 git push
 sẽ tự được hiểu là:
 git push <tên repo> <nhánh>
 -> shortcut
- Git push chỉ push sự thay đổi trên commit
- Khi sử dụng lệnh:
git commit --amend -m <Tên commit>
 + Branch sẽ phân nhánh mới dựa trên vị trí được ghi đè (--amend cho phép
 + commit đè.
 + Khi đó, lệnh git push sẽ có vấn đề.
 + Giải pháp:
 git push <tên repo> <tên nhánh> -f
 + Trong đó, -f là force push, yêu cầu github cập nhật ngay cả khi ghi đè.
 + Lưu ý, nếu nhánh có bản remote repo lúc đầu ko đc đặt tên, nó sẽ biến mất.

* (Feature 3) Sync changes from github to computer.
- Tạo 1 nơi viết lệnh mới
- Chuyển địa điểm code đến Desktop:
cd ~/Desktop
- Sau đó:
git clone <mã https> <tên folder>
 + Mục đích: copy các file có trên remote repo về máy
 + <Tên folder> có thể có hoặc không, nếu không sẽ tạo tự động 1 folder
 + Ta sẽ có 1 local repo tương tự nhưng độc lập với cái trong máy
 + Khi thực hiện commit trên repo mới và push lên github, sử dụng lệnh
 + git log ... sẽ thấy commit trên local và remote đã là một.
 + Tuy nhiên khi quay lại nơi viết lệnh lúc đầu, sử dụng git log ... sẽ thấy
 + chưa có bản cập nhật như ở bên viết lệnh kia.
- Ghép lại:
 + Chuyển về nơi chứa file repo lúc đầu
 + Sử dụng lệnh fetch
 git fetch
 + Sau đó, kiểm tra lại (git log...)
 + Cập nhật lại.
(Bằng một cách nào đó, tôi chưa thể test tính năng này)

- Lệnh pull:
git pull <remote repo which want to pull from> <nhánh>
 + Khi lệnh này đc thực thi, ta sẽ cập nhật nhánh trong repo được chọn.
 + Tương tự, có thể tạo shortcut:
 git pull <repo> <nhánh> --set-upstream

* Summary:
1. Create an Online Backup
git remote add <repo> <url>
git push <repo> <branch>
2. Sync Computer -> GitHub
git push origin <branch>
git push origin <branch> -f
3. Sync Github -> Computer
git pull origin <branch>
-> Làm thủ công. Vì kiểm soát được tiến độ và chất lượng code.

* Giải quyết vấn đề:
1. Tạo project trên git hub
- C1:
 + Create some new code
 + git init
 + Create Github reposity
 + git push
- C2:
 + Create new reposity on Github first
 + git clone
 - Khi clone, tại sao lại chọn Desktop, vì đây là nơi Comment line đang chạy
 - Tiết kiệm một số bước như: Khởi tạo (init), kết nối link http (git remote add...).
2. Tham gia vào 1 team đã có project:
 - Download the team's code -> git clone the team's repository
 - Contribute to the code -> work with the code as normal

* Setting up SSH Keys for Github (Chưa tìm hiểu)